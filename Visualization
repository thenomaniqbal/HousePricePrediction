{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "d7756089",
   "metadata": {},
   "source": [
    "# <b>Regression?"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b72e104f",
   "metadata": {},
   "source": [
    "Regression searches for relationships among variables. you need regression to answer whether and how some phenomenon influences the other or how several variables are related. In short, the ability of a model to predict continuous or real values based on a training dataset is called Regression.  \n",
    "It is used to determine how and up to what extent the experience or gender impact salaries. For example, observe an employee in a company and try to understand how their salaries depend on the features, such as experience, level of education, role, city they work in, and so on.  \n",
    "Now, we know that, this is a regression problem where data related to each employee represent one observation. The presumption is that the experience, education, role, and city are the independent features, while the salary depends on them.\n",
    "Similar is the case for the house price prediction in an area based on numbers of bedrooms, distances to the city center, and so on. <b> (which we will be trying to predict later.) </b>  \n",
    "Generally, in regression analysis, you need to find a function (observation) that maps (RS) some features (2 or more) or variables to others sufficiently well (dependability).  \n",
    "<b>dependent features are called the dependent variables, outputs, or responses.</b>  \n",
    "<b>independent features are called the independent variables, inputs, or predictors.</b>  \n",
    "It is a common practice to denote the outputs with ùë¶ and inputs with ùë•. If there are two or more independent variables, they can be represented as the vector ùê± = (ùë•‚ÇÅ, ‚Ä¶, ùë•·µ£), where ùëü is the number of inputs.  \n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "38ff4edf",
   "metadata": {},
   "source": [
    "# Linear Regression?"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "25da721d",
   "metadata": {},
   "source": [
    "<b>Simple Linear Regression</b>  \n",
    "Simple or single-variate linear regression is the simplest case of linear regression with a single independent variable, ùê± = ùë•.\n",
    "The following figure illustrates simple linear regression:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "f254adde",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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O+vIkSMBAQFCodDBwUEkEt28ebNeGTk5OaGhoXZ2dn369ImMjFS9t7EeNTkUTRCLxS4uLgzDfPjhh+bm5itXrmTbq6urY2JiwsPDVVvevn3bysrqu+++U7XMnz/f3t7+0qVL9fY5derU69evq1aLbKaMjIyBAwdu27Zt0KBBtra2AQEB7EBvC3mN7jQ/MgAAoGsiIiKSkpJqa2sDAgK2bt16/vz5xYsXt7F8TDCK3HLu3LkjEAhUWVYkEk2fPv3zzz9n55tmZmaOGTNmwIABmzZtMjMz27p168SJE48dO+bl5UUIOXHixMyZM4OCgiIjI+Vy+cKFC2tra994442GvaSnp48bN65nz55r1qxxcHC4ffv2lStXCCFfffWVXC6/ePFibGwsIYQd4tVWpyr1fqhLly6NGjWqsf2HhYV17Njxxx9/tLa2LiwsPHTokHoOFovF77zzzpdffnn06NGoqCg+n8+OXB45ciQ0NHTkyJHbt2+vqKj47rvvRo8effbsWQcHh3rvnTt37v79+1etWuXo6MgOxzbRY9OHomnffPONtbX1rl272L8iVB8K58+fLy0tHT58uGpLFxeXd99996effvroo4+EQmFkZOSOHTvi4+MbDjP379/f0tLyyJEjw4YNU29nGEahUDRWCY/HEwgEDdsvX75sampaVVW1evXqioqKpUuXhoWFZWZmdujQ4aU/3Wt4je40PzIAAKBr2BErkUika99paxcisjYpFIq6urqysrLdu3fv2bNn/PjxZmZm7EsfffTRnDn/m/u+ZMkSR0fHffv2GRkZEUICAwMHDx4cFRUVHR1NCFm1apWbm1tMTAwbPXv16uXv7//CtPr111937tz5xIkTbEdvvfUW296zZ0+hUGhkZDRkyBCtd6pS74f66quvGtu/XC7PycmJiYmZMGECu7H6aCshZMaMGV988QUhZNSoUWVlZZs2bZozZ46VldWKFSt69OiRkJDAXvg4ZMgQT0/PjRs3qi6PI4TMmzePzcT+/v6nTp2Ki4t75513mu6x6UPRNHd399LSUg8PD/VjSwi5cOECj8ert6jN119/LZPJ1q9f7+bmFhkZ+euvv/r7+zfcJ5/P79u374ULF+q1nz59evz48Y1V4ufn1/Biytzc3NLSUm9v79jYWHZVdgsLi+Dg4LS0tFGjRr30p2sYypVKpWr0vWEof+3u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\n",
      "text/plain": [
       "<PIL.PngImagePlugin.PngImageFile image mode=RGB size=950x481 at 0x1B0908EE8B0>"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# load and show an image with Pillow\n",
    "from PIL import Image\n",
    "import numpy as np\n",
    "image = Image.open(r'C:\\Users\\nomaniqbal\\Downloads\\notebook\\Images\\linearregression.png')\n",
    "image"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "184fd1c1",
   "metadata": {},
   "source": [
    "When implementing simple linear regression, you typically start with a given set of input-output (ùë•-ùë¶) pairs (green circles). These pairs are your observations. For example, the leftmost observation (green circle) has the input ùë• = 8 and the actual output (response) ùë¶ = 5. The next one has ùë• = 15 and ùë¶ = 20, and so on.  \n",
    "\n",
    "The estimated regression function (black line) has the equation ùëì(ùë•) = ùëè‚ÇÄ + ùëè‚ÇÅùë•. Your goal is to calculate the optimal values of the predicted weights ùëè‚ÇÄ and ùëè‚ÇÅ (regression coefficients) that minimize SSR <b> (The differences ùë¶·µ¢ - ùëì(ùê±·µ¢) for all observations ùëñ = 1, ‚Ä¶, ùëõ, are called the residuals. Regression is about determining the best predicted weights, that is the weights corresponding to the smallest residuals. To get the best weights, you usually minimize the sum of squared residuals (SSR) for all observations ùëñ = 1, ‚Ä¶, ùëõ: SSR = Œ£·µ¢(ùë¶·µ¢ - ùëì(ùê±·µ¢))¬≤.) </b> and determine the estimated regression function. The value of ùëè‚ÇÄ, also called the intercept, shows the point where the estimated regression line crosses the ùë¶ axis. It is the value of the estimated response ùëì(ùë•) for ùë• = 0. The value of ùëè‚ÇÅ determines the slope of the estimated regression line.  \n",
    "\n",
    "The predicted responses (red squares) are the points on the regression line that correspond to the input values. For example, for the input ùë• = 5, the predicted response is ùëì(5) = 8.33 (represented with the leftmost red square).  \n",
    "\n",
    "The residuals (vertical dashed gray lines) can be calculated as ùë¶·µ¢ - ùëì(ùê±·µ¢) = ùë¶·µ¢ - ùëè‚ÇÄ - ùëè‚ÇÅùë•·µ¢ for ùëñ = 1, ‚Ä¶, ùëõ. They are the distances between the green circles and red squares. When you implement linear regression, you are actually trying to minimize these distances and make the red squares as close to the predefined green circles as possible.  "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "08519b4b",
   "metadata": {},
   "source": [
    "## <b> Multiple Linear Regression?"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3778f7a6",
   "metadata": {},
   "source": [
    "Multiple or multivariate linear regression is a case of linear regression with two or more independent variables.  \n",
    "\n",
    "If there are just two independent variables, the estimated regression function is ùëì(ùë•‚ÇÅ, ùë•‚ÇÇ) = ùëè‚ÇÄ + ùëè‚ÇÅùë•‚ÇÅ + ùëè‚ÇÇùë•‚ÇÇ. It represents a regression plane in a three-dimensional space. The goal of regression is to determine the values of the weights ùëè‚ÇÄ, ùëè‚ÇÅ, and ùëè‚ÇÇ such that this plane is as close as possible to the actual responses and yield the minimal SSR.  \n",
    "\n",
    "The case of more than two independent variables is similar, but more general. The estimated regression function is ùëì(ùë•‚ÇÅ, ‚Ä¶, ùë•·µ£) = ùëè‚ÇÄ + ùëè‚ÇÅùë•‚ÇÅ + ‚ãØ +ùëè·µ£ùë•·µ£, and there are ùëü + 1 weights to be determined when the number of inputs is ùëü.  "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2a3c0c06",
   "metadata": {},
   "source": [
    "## <b> Polynomial Regression?"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "df481806",
   "metadata": {},
   "source": [
    "You can regard polynomial regression as a generalized case of linear regression. You assume the polynomial dependence between the output and inputs and, consequently, the polynomial estimated regression function.\n",
    "\n",
    "In other words, in addition to linear terms like ùëè‚ÇÅùë•‚ÇÅ, your regression function ùëì can include non-linear terms such as ùëè‚ÇÇùë•‚ÇÅ¬≤, ùëè‚ÇÉùë•‚ÇÅ¬≥, or even ùëè‚ÇÑùë•‚ÇÅùë•‚ÇÇ, ùëè‚ÇÖùë•‚ÇÅ¬≤ùë•‚ÇÇ, and so on.\n",
    "\n",
    "The simplest example of polynomial regression has a single independent variable, and the estimated regression function is a polynomial of degree 2: ùëì(ùë•) = ùëè‚ÇÄ + ùëè‚ÇÅùë• + ùëè‚ÇÇùë•¬≤."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d1a284d1",
   "metadata": {},
   "source": [
    "### Predicting Housing Prices using Regression Algorithms"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "09757fa5",
   "metadata": {},
   "source": [
    "how to solve a supervised regression problem using the famous Boston housing price dataset?  \n",
    "Other than location and square footage, a house value is determined by various other factors. Let‚Äôs analyze this problem in detail and come up with our own machine learning model to predict a housing price."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "de7eddc6",
   "metadata": {},
   "source": [
    "<b> Boston Housing Prices Dataset"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "44a68f31",
   "metadata": {},
   "source": [
    "In this dataset, each row describes a boston town or suburb. There are 506 rows and 13 attributes (features) with a target column (price).\n",
    "\n",
    "The problem that we are going to solve here is that given a set of features that describe a house in Boston, our machine learning model must predict the house price. To train our machine learning model with boston housing data, we will be using scikit-learn‚Äôs boston dataset.\n",
    "\n",
    "We will use pandas and scikit-learn to load and explore the dataset. The dataset can easily be loaded from scikit-learn‚Äôs datasets module using load_boston function.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "87d3ca65",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\nomaniqbal\\anaconda3\\lib\\site-packages\\sklearn\\utils\\deprecation.py:87: FutureWarning: Function load_boston is deprecated; `load_boston` is deprecated in 1.0 and will be removed in 1.2.\n",
      "\n",
      "    The Boston housing prices dataset has an ethical problem. You can refer to\n",
      "    the documentation of this function for further details.\n",
      "\n",
      "    The scikit-learn maintainers therefore strongly discourage the use of this\n",
      "    dataset unless the purpose of the code is to study and educate about\n",
      "    ethical issues in data science and machine learning.\n",
      "\n",
      "    In this special case, you can fetch the dataset from the original\n",
      "    source::\n",
      "\n",
      "        import pandas as pd\n",
      "        import numpy as np\n",
      "\n",
      "\n",
      "        data_url = \"http://lib.stat.cmu.edu/datasets/boston\"\n",
      "        raw_df = pd.read_csv(data_url, sep=\"\\s+\", skiprows=22, header=None)\n",
      "        data = np.hstack([raw_df.values[::2, :], raw_df.values[1::2, :2]])\n",
      "        target = raw_df.values[1::2, 2]\n",
      "\n",
      "    Alternative datasets include the California housing dataset (i.e.\n",
      "    :func:`~sklearn.datasets.fetch_california_housing`) and the Ames housing\n",
      "    dataset. You can load the datasets as follows::\n",
      "\n",
      "        from sklearn.datasets import fetch_california_housing\n",
      "        housing = fetch_california_housing()\n",
      "\n",
      "    for the California housing dataset and::\n",
      "\n",
      "        from sklearn.datasets import fetch_openml\n",
      "        housing = fetch_openml(name=\"house_prices\", as_frame=True)\n",
      "\n",
      "    for the Ames housing dataset.\n",
      "    \n",
      "  warnings.warn(msg, category=FutureWarning)\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "#To visualize data using 2D plots.\n",
    "import matplotlib.pyplot as plt\n",
    "#To make 2D plots look pretty and readable.\n",
    "import seaborn as sns\n",
    "import warnings\n",
    "import random\n",
    "import os\n",
    "#To create machine learning models easily and make predictions.\n",
    "from sklearn.datasets import load_boston\n",
    "pd.options.display.float_format = '{:,.2f}'.format\n",
    "dataset = load_boston()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "284f88ac",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[INFO] keys : dict_keys(['data', 'target', 'feature_names', 'DESCR', 'filename', 'data_module'])\n"
     ]
    }
   ],
   "source": [
    "#find keys in the dataset\n",
    "print(\"[INFO] keys : {}\".format(dataset.keys()))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "ad25fa21",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[INFO] features shape : (506, 13)\n",
      "[INFO] target shape   : (506,)\n"
     ]
    }
   ],
   "source": [
    "#There are 13 features and 1 target that are accessed using data key and target key. \n",
    "#We can easily access the shape of features and target using shape.\n",
    "print(\"[INFO] features shape : {}\".format(dataset.data.shape))\n",
    "print(\"[INFO] target shape   : {}\".format(dataset.target.shape))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "b5689545",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[INFO] feature names\n",
      "['CRIM' 'ZN' 'INDUS' 'CHAS' 'NOX' 'RM' 'AGE' 'DIS' 'RAD' 'TAX' 'PTRATIO'\n",
      " 'B' 'LSTAT']\n"
     ]
    }
   ],
   "source": [
    "#names of the attributes\n",
    "print(\"[INFO] feature names\")\n",
    "print(dataset.feature_names)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "54ca25bf",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([24. , 21.6, 34.7, 33.4, 36.2, 28.7, 22.9, 27.1, 16.5, 18.9, 15. ,\n",
       "       18.9, 21.7, 20.4, 18.2, 19.9, 23.1, 17.5, 20.2, 18.2, 13.6, 19.6,\n",
       "       15.2, 14.5, 15.6, 13.9, 16.6, 14.8, 18.4, 21. , 12.7, 14.5, 13.2,\n",
       "       13.1, 13.5, 18.9, 20. , 21. , 24.7, 30.8, 34.9, 26.6, 25.3, 24.7,\n",
       "       21.2, 19.3, 20. , 16.6, 14.4, 19.4, 19.7, 20.5, 25. , 23.4, 18.9,\n",
       "       35.4, 24.7, 31.6, 23.3, 19.6, 18.7, 16. , 22.2, 25. , 33. , 23.5,\n",
       "       19.4, 22. , 17.4, 20.9, 24.2, 21.7, 22.8, 23.4, 24.1, 21.4, 20. ,\n",
       "       20.8, 21.2, 20.3, 28. , 23.9, 24.8, 22.9, 23.9, 26.6, 22.5, 22.2,\n",
       "       23.6, 28.7, 22.6, 22. , 22.9, 25. , 20.6, 28.4, 21.4, 38.7, 43.8,\n",
       "       33.2, 27.5, 26.5, 18.6, 19.3, 20.1, 19.5, 19.5, 20.4, 19.8, 19.4,\n",
       "       21.7, 22.8, 18.8, 18.7, 18.5, 18.3, 21.2, 19.2, 20.4, 19.3, 22. ,\n",
       "       20.3, 20.5, 17.3, 18.8, 21.4, 15.7, 16.2, 18. , 14.3, 19.2, 19.6,\n",
       "       23. , 18.4, 15.6, 18.1, 17.4, 17.1, 13.3, 17.8, 14. , 14.4, 13.4,\n",
       "       15.6, 11.8, 13.8, 15.6, 14.6, 17.8, 15.4, 21.5, 19.6, 15.3, 19.4,\n",
       "       17. , 15.6, 13.1, 41.3, 24.3, 23.3, 27. , 50. , 50. , 50. , 22.7,\n",
       "       25. , 50. , 23.8, 23.8, 22.3, 17.4, 19.1, 23.1, 23.6, 22.6, 29.4,\n",
       "       23.2, 24.6, 29.9, 37.2, 39.8, 36.2, 37.9, 32.5, 26.4, 29.6, 50. ,\n",
       "       32. , 29.8, 34.9, 37. , 30.5, 36.4, 31.1, 29.1, 50. , 33.3, 30.3,\n",
       "       34.6, 34.9, 32.9, 24.1, 42.3, 48.5, 50. , 22.6, 24.4, 22.5, 24.4,\n",
       "       20. , 21.7, 19.3, 22.4, 28.1, 23.7, 25. , 23.3, 28.7, 21.5, 23. ,\n",
       "       26.7, 21.7, 27.5, 30.1, 44.8, 50. , 37.6, 31.6, 46.7, 31.5, 24.3,\n",
       "       31.7, 41.7, 48.3, 29. , 24. , 25.1, 31.5, 23.7, 23.3, 22. , 20.1,\n",
       "       22.2, 23.7, 17.6, 18.5, 24.3, 20.5, 24.5, 26.2, 24.4, 24.8, 29.6,\n",
       "       42.8, 21.9, 20.9, 44. , 50. , 36. , 30.1, 33.8, 43.1, 48.8, 31. ,\n",
       "       36.5, 22.8, 30.7, 50. , 43.5, 20.7, 21.1, 25.2, 24.4, 35.2, 32.4,\n",
       "       32. , 33.2, 33.1, 29.1, 35.1, 45.4, 35.4, 46. , 50. , 32.2, 22. ,\n",
       "       20.1, 23.2, 22.3, 24.8, 28.5, 37.3, 27.9, 23.9, 21.7, 28.6, 27.1,\n",
       "       20.3, 22.5, 29. , 24.8, 22. , 26.4, 33.1, 36.1, 28.4, 33.4, 28.2,\n",
       "       22.8, 20.3, 16.1, 22.1, 19.4, 21.6, 23.8, 16.2, 17.8, 19.8, 23.1,\n",
       "       21. , 23.8, 23.1, 20.4, 18.5, 25. , 24.6, 23. , 22.2, 19.3, 22.6,\n",
       "       19.8, 17.1, 19.4, 22.2, 20.7, 21.1, 19.5, 18.5, 20.6, 19. , 18.7,\n",
       "       32.7, 16.5, 23.9, 31.2, 17.5, 17.2, 23.1, 24.5, 26.6, 22.9, 24.1,\n",
       "       18.6, 30.1, 18.2, 20.6, 17.8, 21.7, 22.7, 22.6, 25. , 19.9, 20.8,\n",
       "       16.8, 21.9, 27.5, 21.9, 23.1, 50. , 50. , 50. , 50. , 50. , 13.8,\n",
       "       13.8, 15. , 13.9, 13.3, 13.1, 10.2, 10.4, 10.9, 11.3, 12.3,  8.8,\n",
       "        7.2, 10.5,  7.4, 10.2, 11.5, 15.1, 23.2,  9.7, 13.8, 12.7, 13.1,\n",
       "       12.5,  8.5,  5. ,  6.3,  5.6,  7.2, 12.1,  8.3,  8.5,  5. , 11.9,\n",
       "       27.9, 17.2, 27.5, 15. , 17.2, 17.9, 16.3,  7. ,  7.2,  7.5, 10.4,\n",
       "        8.8,  8.4, 16.7, 14.2, 20.8, 13.4, 11.7,  8.3, 10.2, 10.9, 11. ,\n",
       "        9.5, 14.5, 14.1, 16.1, 14.3, 11.7, 13.4,  9.6,  8.7,  8.4, 12.8,\n",
       "       10.5, 17.1, 18.4, 15.4, 10.8, 11.8, 14.9, 12.6, 14.1, 13. , 13.4,\n",
       "       15.2, 16.1, 17.8, 14.9, 14.1, 12.7, 13.5, 14.9, 20. , 16.4, 17.7,\n",
       "       19.5, 20.2, 21.4, 19.9, 19. , 19.1, 19.1, 20.1, 19.9, 19.6, 23.2,\n",
       "       29.8, 13.8, 13.3, 16.7, 12. , 14.6, 21.4, 23. , 23.7, 25. , 21.8,\n",
       "       20.6, 21.2, 19.1, 20.6, 15.2,  7. ,  8.1, 13.6, 20.1, 21.8, 24.5,\n",
       "       23.1, 19.7, 18.3, 21.2, 17.5, 16.8, 22.4, 20.6, 23.9, 22. , 11.9])"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dataset.target"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "721bd255",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[INFO] dataset summary\n",
      ".. _boston_dataset:\n",
      "\n",
      "Boston house prices dataset\n",
      "---------------------------\n",
      "\n",
      "**Data Set Characteristics:**  \n",
      "\n",
      "    :Number of Instances: 506 \n",
      "\n",
      "    :Number of Attributes: 13 numeric/categorical predictive. Median Value (attribute 14) is usually the target.\n",
      "\n",
      "    :Attribute Information (in order):\n",
      "        - CRIM     per capita crime rate by town\n",
      "        - ZN       proportion of residential land zoned for lots over 25,000 sq.ft.\n",
      "        - INDUS    proportion of non-retail business acres per town\n",
      "        - CHAS     Charles River dummy variable (= 1 if tract bounds river; 0 otherwise)\n",
      "        - NOX      nitric oxides concentration (parts per 10 million)\n",
      "        - RM       average number of rooms per dwelling\n",
      "        - AGE      proportion of owner-occupied units built prior to 1940\n",
      "        - DIS      weighted distances to five Boston employment centres\n",
      "        - RAD      index of accessibility to radial highways\n",
      "        - TAX      full-value property-tax rate per $10,000\n",
      "        - PTRATIO  pupil-teacher ratio by town\n",
      "        - B        1000(Bk - 0.63)^2 where Bk is the proportion of black people by town\n",
      "        - LSTAT    % lower status of the population\n",
      "        - MEDV     Median value of owner-occupied homes in $1000's\n",
      "\n",
      "    :Missing Attribute Values: None\n",
      "\n",
      "    :Creator: Harrison, D. and Rubinfeld, D.L.\n",
      "\n",
      "This is a copy of UCI ML housing dataset.\n",
      "https://archive.ics.uci.edu/ml/machine-learning-databases/housing/\n",
      "\n",
      "\n",
      "This dataset was taken from the StatLib library which is maintained at Carnegie Mellon University.\n",
      "\n",
      "The Boston house-price data of Harrison, D. and Rubinfeld, D.L. 'Hedonic\n",
      "prices and the demand for clean air', J. Environ. Economics & Management,\n",
      "vol.5, 81-102, 1978.   Used in Belsley, Kuh & Welsch, 'Regression diagnostics\n",
      "...', Wiley, 1980.   N.B. Various transformations are used in the table on\n",
      "pages 244-261 of the latter.\n",
      "\n",
      "The Boston house-price data has been used in many machine learning papers that address regression\n",
      "problems.   \n",
      "     \n",
      ".. topic:: References\n",
      "\n",
      "   - Belsley, Kuh & Welsch, 'Regression diagnostics: Identifying Influential Data and Sources of Collinearity', Wiley, 1980. 244-261.\n",
      "   - Quinlan,R. (1993). Combining Instance-Based and Model-Based Learning. In Proceedings on the Tenth International Conference of Machine Learning, 236-243, University of Massachusetts, Amherst. Morgan Kaufmann.\n",
      "\n"
     ]
    }
   ],
   "source": [
    "#desciption of each column\n",
    "print(\"[INFO] dataset summary\")\n",
    "print(dataset.DESCR)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1ee7bcc0",
   "metadata": {},
   "source": [
    "<b> Analyze the dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "e7ff14c7",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[INFO] df type : <class 'pandas.core.frame.DataFrame'>\n",
      "[INFO] df shape: (506, 13)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "      <th>4</th>\n",
       "      <th>5</th>\n",
       "      <th>6</th>\n",
       "      <th>7</th>\n",
       "      <th>8</th>\n",
       "      <th>9</th>\n",
       "      <th>10</th>\n",
       "      <th>11</th>\n",
       "      <th>12</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.01</td>\n",
       "      <td>18.00</td>\n",
       "      <td>2.31</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.54</td>\n",
       "      <td>6.58</td>\n",
       "      <td>65.20</td>\n",
       "      <td>4.09</td>\n",
       "      <td>1.00</td>\n",
       "      <td>296.00</td>\n",
       "      <td>15.30</td>\n",
       "      <td>396.90</td>\n",
       "      <td>4.98</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.03</td>\n",
       "      <td>0.00</td>\n",
       "      <td>7.07</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.47</td>\n",
       "      <td>6.42</td>\n",
       "      <td>78.90</td>\n",
       "      <td>4.97</td>\n",
       "      <td>2.00</td>\n",
       "      <td>242.00</td>\n",
       "      <td>17.80</td>\n",
       "      <td>396.90</td>\n",
       "      <td>9.14</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.03</td>\n",
       "      <td>0.00</td>\n",
       "      <td>7.07</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.47</td>\n",
       "      <td>7.18</td>\n",
       "      <td>61.10</td>\n",
       "      <td>4.97</td>\n",
       "      <td>2.00</td>\n",
       "      <td>242.00</td>\n",
       "      <td>17.80</td>\n",
       "      <td>392.83</td>\n",
       "      <td>4.03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.03</td>\n",
       "      <td>0.00</td>\n",
       "      <td>2.18</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.46</td>\n",
       "      <td>7.00</td>\n",
       "      <td>45.80</td>\n",
       "      <td>6.06</td>\n",
       "      <td>3.00</td>\n",
       "      <td>222.00</td>\n",
       "      <td>18.70</td>\n",
       "      <td>394.63</td>\n",
       "      <td>2.94</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.07</td>\n",
       "      <td>0.00</td>\n",
       "      <td>2.18</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.46</td>\n",
       "      <td>7.15</td>\n",
       "      <td>54.20</td>\n",
       "      <td>6.06</td>\n",
       "      <td>3.00</td>\n",
       "      <td>222.00</td>\n",
       "      <td>18.70</td>\n",
       "      <td>396.90</td>\n",
       "      <td>5.33</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    0     1    2    3    4    5     6    7    8      9     10     11   12\n",
       "0 0.01 18.00 2.31 0.00 0.54 6.58 65.20 4.09 1.00 296.00 15.30 396.90 4.98\n",
       "1 0.03  0.00 7.07 0.00 0.47 6.42 78.90 4.97 2.00 242.00 17.80 396.90 9.14\n",
       "2 0.03  0.00 7.07 0.00 0.47 7.18 61.10 4.97 2.00 242.00 17.80 392.83 4.03\n",
       "3 0.03  0.00 2.18 0.00 0.46 7.00 45.80 6.06 3.00 222.00 18.70 394.63 2.94\n",
       "4 0.07  0.00 2.18 0.00 0.46 7.15 54.20 6.06 3.00 222.00 18.70 396.90 5.33"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = pd.DataFrame(dataset.data)\n",
    "print(\"[INFO] df type : {}\".format(type(df)))\n",
    "print(\"[INFO] df shape: {}\".format(df.shape))\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "dce45da2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "   CRIM    ZN  INDUS  CHAS  NOX   RM   AGE  DIS  RAD    TAX  PTRATIO      B  \\\n",
      "0  0.01 18.00   2.31  0.00 0.54 6.58 65.20 4.09 1.00 296.00    15.30 396.90   \n",
      "1  0.03  0.00   7.07  0.00 0.47 6.42 78.90 4.97 2.00 242.00    17.80 396.90   \n",
      "2  0.03  0.00   7.07  0.00 0.47 7.18 61.10 4.97 2.00 242.00    17.80 392.83   \n",
      "3  0.03  0.00   2.18  0.00 0.46 7.00 45.80 6.06 3.00 222.00    18.70 394.63   \n",
      "4  0.07  0.00   2.18  0.00 0.46 7.15 54.20 6.06 3.00 222.00    18.70 396.90   \n",
      "\n",
      "   LSTAT  \n",
      "0   4.98  \n",
      "1   9.14  \n",
      "2   4.03  \n",
      "3   2.94  \n",
      "4   5.33  \n"
     ]
    }
   ],
   "source": [
    "# looks confusing right\n",
    "df.columns = dataset.feature_names\n",
    "print(df.head())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "d9d7d5c8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['CRIM', 'ZN', 'INDUS', 'CHAS', 'NOX', 'RM', 'AGE', 'DIS', 'RAD',\n",
       "       'TAX', 'PTRATIO', 'B', 'LSTAT'], dtype='<U7')"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dataset.feature_names"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "a52f45e6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['CRIM', 'ZN', 'INDUS', 'CHAS', 'NOX', 'RM', 'AGE', 'DIS', 'RAD', 'TAX',\n",
       "       'PTRATIO', 'B', 'LSTAT'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "61cdd3e1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>CRIM</th>\n",
       "      <th>ZN</th>\n",
       "      <th>INDUS</th>\n",
       "      <th>CHAS</th>\n",
       "      <th>NOX</th>\n",
       "      <th>RM</th>\n",
       "      <th>AGE</th>\n",
       "      <th>DIS</th>\n",
       "      <th>RAD</th>\n",
       "      <th>TAX</th>\n",
       "      <th>PTRATIO</th>\n",
       "      <th>B</th>\n",
       "      <th>LSTAT</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.01</td>\n",
       "      <td>18.00</td>\n",
       "      <td>2.31</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.54</td>\n",
       "      <td>6.58</td>\n",
       "      <td>65.20</td>\n",
       "      <td>4.09</td>\n",
       "      <td>1.00</td>\n",
       "      <td>296.00</td>\n",
       "      <td>15.30</td>\n",
       "      <td>396.90</td>\n",
       "      <td>4.98</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.03</td>\n",
       "      <td>0.00</td>\n",
       "      <td>7.07</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.47</td>\n",
       "      <td>6.42</td>\n",
       "      <td>78.90</td>\n",
       "      <td>4.97</td>\n",
       "      <td>2.00</td>\n",
       "      <td>242.00</td>\n",
       "      <td>17.80</td>\n",
       "      <td>396.90</td>\n",
       "      <td>9.14</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.03</td>\n",
       "      <td>0.00</td>\n",
       "      <td>7.07</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.47</td>\n",
       "      <td>7.18</td>\n",
       "      <td>61.10</td>\n",
       "      <td>4.97</td>\n",
       "      <td>2.00</td>\n",
       "      <td>242.00</td>\n",
       "      <td>17.80</td>\n",
       "      <td>392.83</td>\n",
       "      <td>4.03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.03</td>\n",
       "      <td>0.00</td>\n",
       "      <td>2.18</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.46</td>\n",
       "      <td>7.00</td>\n",
       "      <td>45.80</td>\n",
       "      <td>6.06</td>\n",
       "      <td>3.00</td>\n",
       "      <td>222.00</td>\n",
       "      <td>18.70</td>\n",
       "      <td>394.63</td>\n",
       "      <td>2.94</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.07</td>\n",
       "      <td>0.00</td>\n",
       "      <td>2.18</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.46</td>\n",
       "      <td>7.15</td>\n",
       "      <td>54.20</td>\n",
       "      <td>6.06</td>\n",
       "      <td>3.00</td>\n",
       "      <td>222.00</td>\n",
       "      <td>18.70</td>\n",
       "      <td>396.90</td>\n",
       "      <td>5.33</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   CRIM    ZN  INDUS  CHAS  NOX   RM   AGE  DIS  RAD    TAX  PTRATIO      B  \\\n",
       "0  0.01 18.00   2.31  0.00 0.54 6.58 65.20 4.09 1.00 296.00    15.30 396.90   \n",
       "1  0.03  0.00   7.07  0.00 0.47 6.42 78.90 4.97 2.00 242.00    17.80 396.90   \n",
       "2  0.03  0.00   7.07  0.00 0.47 7.18 61.10 4.97 2.00 242.00    17.80 392.83   \n",
       "3  0.03  0.00   2.18  0.00 0.46 7.00 45.80 6.06 3.00 222.00    18.70 394.63   \n",
       "4  0.07  0.00   2.18  0.00 0.46 7.15 54.20 6.06 3.00 222.00    18.70 396.90   \n",
       "\n",
       "   LSTAT  \n",
       "0   4.98  \n",
       "1   9.14  \n",
       "2   4.03  \n",
       "3   2.94  \n",
       "4   5.33  "
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "a22dc70b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>CRIM</th>\n",
       "      <th>ZN</th>\n",
       "      <th>INDUS</th>\n",
       "      <th>CHAS</th>\n",
       "      <th>NOX</th>\n",
       "      <th>RM</th>\n",
       "      <th>AGE</th>\n",
       "      <th>DIS</th>\n",
       "      <th>RAD</th>\n",
       "      <th>TAX</th>\n",
       "      <th>PTRATIO</th>\n",
       "      <th>B</th>\n",
       "      <th>LSTAT</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.01</td>\n",
       "      <td>18.00</td>\n",
       "      <td>2.31</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.54</td>\n",
       "      <td>6.58</td>\n",
       "      <td>65.20</td>\n",
       "      <td>4.09</td>\n",
       "      <td>1.00</td>\n",
       "      <td>296.00</td>\n",
       "      <td>15.30</td>\n",
       "      <td>396.90</td>\n",
       "      <td>4.98</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.03</td>\n",
       "      <td>0.00</td>\n",
       "      <td>7.07</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.47</td>\n",
       "      <td>6.42</td>\n",
       "      <td>78.90</td>\n",
       "      <td>4.97</td>\n",
       "      <td>2.00</td>\n",
       "      <td>242.00</td>\n",
       "      <td>17.80</td>\n",
       "      <td>396.90</td>\n",
       "      <td>9.14</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.03</td>\n",
       "      <td>0.00</td>\n",
       "      <td>7.07</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.47</td>\n",
       "      <td>7.18</td>\n",
       "      <td>61.10</td>\n",
       "      <td>4.97</td>\n",
       "      <td>2.00</td>\n",
       "      <td>242.00</td>\n",
       "      <td>17.80</td>\n",
       "      <td>392.83</td>\n",
       "      <td>4.03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.03</td>\n",
       "      <td>0.00</td>\n",
       "      <td>2.18</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.46</td>\n",
       "      <td>7.00</td>\n",
       "      <td>45.80</td>\n",
       "      <td>6.06</td>\n",
       "      <td>3.00</td>\n",
       "      <td>222.00</td>\n",
       "      <td>18.70</td>\n",
       "      <td>394.63</td>\n",
       "      <td>2.94</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.07</td>\n",
       "      <td>0.00</td>\n",
       "      <td>2.18</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.46</td>\n",
       "      <td>7.15</td>\n",
       "      <td>54.20</td>\n",
       "      <td>6.06</td>\n",
       "      <td>3.00</td>\n",
       "      <td>222.00</td>\n",
       "      <td>18.70</td>\n",
       "      <td>396.90</td>\n",
       "      <td>5.33</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>501</th>\n",
       "      <td>0.06</td>\n",
       "      <td>0.00</td>\n",
       "      <td>11.93</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.57</td>\n",
       "      <td>6.59</td>\n",
       "      <td>69.10</td>\n",
       "      <td>2.48</td>\n",
       "      <td>1.00</td>\n",
       "      <td>273.00</td>\n",
       "      <td>21.00</td>\n",
       "      <td>391.99</td>\n",
       "      <td>9.67</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>502</th>\n",
       "      <td>0.05</td>\n",
       "      <td>0.00</td>\n",
       "      <td>11.93</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.57</td>\n",
       "      <td>6.12</td>\n",
       "      <td>76.70</td>\n",
       "      <td>2.29</td>\n",
       "      <td>1.00</td>\n",
       "      <td>273.00</td>\n",
       "      <td>21.00</td>\n",
       "      <td>396.90</td>\n",
       "      <td>9.08</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>503</th>\n",
       "      <td>0.06</td>\n",
       "      <td>0.00</td>\n",
       "      <td>11.93</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.57</td>\n",
       "      <td>6.98</td>\n",
       "      <td>91.00</td>\n",
       "      <td>2.17</td>\n",
       "      <td>1.00</td>\n",
       "      <td>273.00</td>\n",
       "      <td>21.00</td>\n",
       "      <td>396.90</td>\n",
       "      <td>5.64</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>504</th>\n",
       "      <td>0.11</td>\n",
       "      <td>0.00</td>\n",
       "      <td>11.93</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.57</td>\n",
       "      <td>6.79</td>\n",
       "      <td>89.30</td>\n",
       "      <td>2.39</td>\n",
       "      <td>1.00</td>\n",
       "      <td>273.00</td>\n",
       "      <td>21.00</td>\n",
       "      <td>393.45</td>\n",
       "      <td>6.48</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>505</th>\n",
       "      <td>0.05</td>\n",
       "      <td>0.00</td>\n",
       "      <td>11.93</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.57</td>\n",
       "      <td>6.03</td>\n",
       "      <td>80.80</td>\n",
       "      <td>2.50</td>\n",
       "      <td>1.00</td>\n",
       "      <td>273.00</td>\n",
       "      <td>21.00</td>\n",
       "      <td>396.90</td>\n",
       "      <td>7.88</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>506 rows √ó 13 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     CRIM    ZN  INDUS  CHAS  NOX   RM   AGE  DIS  RAD    TAX  PTRATIO      B  \\\n",
       "0    0.01 18.00   2.31  0.00 0.54 6.58 65.20 4.09 1.00 296.00    15.30 396.90   \n",
       "1    0.03  0.00   7.07  0.00 0.47 6.42 78.90 4.97 2.00 242.00    17.80 396.90   \n",
       "2    0.03  0.00   7.07  0.00 0.47 7.18 61.10 4.97 2.00 242.00    17.80 392.83   \n",
       "3    0.03  0.00   2.18  0.00 0.46 7.00 45.80 6.06 3.00 222.00    18.70 394.63   \n",
       "4    0.07  0.00   2.18  0.00 0.46 7.15 54.20 6.06 3.00 222.00    18.70 396.90   \n",
       "..    ...   ...    ...   ...  ...  ...   ...  ...  ...    ...      ...    ...   \n",
       "501  0.06  0.00  11.93  0.00 0.57 6.59 69.10 2.48 1.00 273.00    21.00 391.99   \n",
       "502  0.05  0.00  11.93  0.00 0.57 6.12 76.70 2.29 1.00 273.00    21.00 396.90   \n",
       "503  0.06  0.00  11.93  0.00 0.57 6.98 91.00 2.17 1.00 273.00    21.00 396.90   \n",
       "504  0.11  0.00  11.93  0.00 0.57 6.79 89.30 2.39 1.00 273.00    21.00 393.45   \n",
       "505  0.05  0.00  11.93  0.00 0.57 6.03 80.80 2.50 1.00 273.00    21.00 396.90   \n",
       "\n",
       "     LSTAT  \n",
       "0     4.98  \n",
       "1     9.14  \n",
       "2     4.03  \n",
       "3     2.94  \n",
       "4     5.33  \n",
       "..     ...  \n",
       "501   9.67  \n",
       "502   9.08  \n",
       "503   5.64  \n",
       "504   6.48  \n",
       "505   7.88  \n",
       "\n",
       "[506 rows x 13 columns]"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "b51106a4",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "   CRIM    ZN  INDUS  CHAS  NOX   RM   AGE  DIS  RAD    TAX  PTRATIO      B  \\\n",
      "0  0.01 18.00   2.31  0.00 0.54 6.58 65.20 4.09 1.00 296.00    15.30 396.90   \n",
      "1  0.03  0.00   7.07  0.00 0.47 6.42 78.90 4.97 2.00 242.00    17.80 396.90   \n",
      "2  0.03  0.00   7.07  0.00 0.47 7.18 61.10 4.97 2.00 242.00    17.80 392.83   \n",
      "3  0.03  0.00   2.18  0.00 0.46 7.00 45.80 6.06 3.00 222.00    18.70 394.63   \n",
      "4  0.07  0.00   2.18  0.00 0.46 7.15 54.20 6.06 3.00 222.00    18.70 396.90   \n",
      "\n",
      "   LSTAT  PRICE  \n",
      "0   4.98  24.00  \n",
      "1   9.14  21.60  \n",
      "2   4.03  34.70  \n",
      "3   2.94  33.40  \n",
      "4   5.33  36.20  \n"
     ]
    }
   ],
   "source": [
    "#target column\n",
    "df[\"PRICE\"] = dataset.target\n",
    "print(df.head())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "f293cd43",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CRIM       float64\n",
      "ZN         float64\n",
      "INDUS      float64\n",
      "CHAS       float64\n",
      "NOX        float64\n",
      "RM         float64\n",
      "AGE        float64\n",
      "DIS        float64\n",
      "RAD        float64\n",
      "TAX        float64\n",
      "PTRATIO    float64\n",
      "B          float64\n",
      "LSTAT      float64\n",
      "PRICE      float64\n",
      "dtype: object\n"
     ]
    }
   ],
   "source": [
    "#check the data type\n",
    "print(df.dtypes)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "296b13a4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>CRIM</th>\n",
       "      <th>ZN</th>\n",
       "      <th>INDUS</th>\n",
       "      <th>CHAS</th>\n",
       "      <th>NOX</th>\n",
       "      <th>RM</th>\n",
       "      <th>AGE</th>\n",
       "      <th>DIS</th>\n",
       "      <th>RAD</th>\n",
       "      <th>TAX</th>\n",
       "      <th>PTRATIO</th>\n",
       "      <th>B</th>\n",
       "      <th>LSTAT</th>\n",
       "      <th>PRICE</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>506.00</td>\n",
       "      <td>506.00</td>\n",
       "      <td>506.00</td>\n",
       "      <td>506.00</td>\n",
       "      <td>506.00</td>\n",
       "      <td>506.00</td>\n",
       "      <td>506.00</td>\n",
       "      <td>506.00</td>\n",
       "      <td>506.00</td>\n",
       "      <td>506.00</td>\n",
       "      <td>506.00</td>\n",
       "      <td>506.00</td>\n",
       "      <td>506.00</td>\n",
       "      <td>506.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>3.61</td>\n",
       "      <td>11.36</td>\n",
       "      <td>11.14</td>\n",
       "      <td>0.07</td>\n",
       "      <td>0.55</td>\n",
       "      <td>6.28</td>\n",
       "      <td>68.57</td>\n",
       "      <td>3.80</td>\n",
       "      <td>9.55</td>\n",
       "      <td>408.24</td>\n",
       "      <td>18.46</td>\n",
       "      <td>356.67</td>\n",
       "      <td>12.65</td>\n",
       "      <td>22.53</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>8.60</td>\n",
       "      <td>23.32</td>\n",
       "      <td>6.86</td>\n",
       "      <td>0.25</td>\n",
       "      <td>0.12</td>\n",
       "      <td>0.70</td>\n",
       "      <td>28.15</td>\n",
       "      <td>2.11</td>\n",
       "      <td>8.71</td>\n",
       "      <td>168.54</td>\n",
       "      <td>2.16</td>\n",
       "      <td>91.29</td>\n",
       "      <td>7.14</td>\n",
       "      <td>9.20</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>0.01</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.46</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.39</td>\n",
       "      <td>3.56</td>\n",
       "      <td>2.90</td>\n",
       "      <td>1.13</td>\n",
       "      <td>1.00</td>\n",
       "      <td>187.00</td>\n",
       "      <td>12.60</td>\n",
       "      <td>0.32</td>\n",
       "      <td>1.73</td>\n",
       "      <td>5.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>0.08</td>\n",
       "      <td>0.00</td>\n",
       "      <td>5.19</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.45</td>\n",
       "      <td>5.89</td>\n",
       "      <td>45.02</td>\n",
       "      <td>2.10</td>\n",
       "      <td>4.00</td>\n",
       "      <td>279.00</td>\n",
       "      <td>17.40</td>\n",
       "      <td>375.38</td>\n",
       "      <td>6.95</td>\n",
       "      <td>17.02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>0.26</td>\n",
       "      <td>0.00</td>\n",
       "      <td>9.69</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.54</td>\n",
       "      <td>6.21</td>\n",
       "      <td>77.50</td>\n",
       "      <td>3.21</td>\n",
       "      <td>5.00</td>\n",
       "      <td>330.00</td>\n",
       "      <td>19.05</td>\n",
       "      <td>391.44</td>\n",
       "      <td>11.36</td>\n",
       "      <td>21.20</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>3.68</td>\n",
       "      <td>12.50</td>\n",
       "      <td>18.10</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.62</td>\n",
       "      <td>6.62</td>\n",
       "      <td>94.07</td>\n",
       "      <td>5.19</td>\n",
       "      <td>24.00</td>\n",
       "      <td>666.00</td>\n",
       "      <td>20.20</td>\n",
       "      <td>396.23</td>\n",
       "      <td>16.96</td>\n",
       "      <td>25.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>88.98</td>\n",
       "      <td>100.00</td>\n",
       "      <td>27.74</td>\n",
       "      <td>1.00</td>\n",
       "      <td>0.87</td>\n",
       "      <td>8.78</td>\n",
       "      <td>100.00</td>\n",
       "      <td>12.13</td>\n",
       "      <td>24.00</td>\n",
       "      <td>711.00</td>\n",
       "      <td>22.00</td>\n",
       "      <td>396.90</td>\n",
       "      <td>37.97</td>\n",
       "      <td>50.00</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        CRIM     ZN  INDUS   CHAS    NOX     RM    AGE    DIS    RAD    TAX  \\\n",
       "count 506.00 506.00 506.00 506.00 506.00 506.00 506.00 506.00 506.00 506.00   \n",
       "mean    3.61  11.36  11.14   0.07   0.55   6.28  68.57   3.80   9.55 408.24   \n",
       "std     8.60  23.32   6.86   0.25   0.12   0.70  28.15   2.11   8.71 168.54   \n",
       "min     0.01   0.00   0.46   0.00   0.39   3.56   2.90   1.13   1.00 187.00   \n",
       "25%     0.08   0.00   5.19   0.00   0.45   5.89  45.02   2.10   4.00 279.00   \n",
       "50%     0.26   0.00   9.69   0.00   0.54   6.21  77.50   3.21   5.00 330.00   \n",
       "75%     3.68  12.50  18.10   0.00   0.62   6.62  94.07   5.19  24.00 666.00   \n",
       "max    88.98 100.00  27.74   1.00   0.87   8.78 100.00  12.13  24.00 711.00   \n",
       "\n",
       "       PTRATIO      B  LSTAT  PRICE  \n",
       "count   506.00 506.00 506.00 506.00  \n",
       "mean     18.46 356.67  12.65  22.53  \n",
       "std       2.16  91.29   7.14   9.20  \n",
       "min      12.60   0.32   1.73   5.00  \n",
       "25%      17.40 375.38   6.95  17.02  \n",
       "50%      19.05 391.44  11.36  21.20  \n",
       "75%      20.20 396.23  16.96  25.00  \n",
       "max      22.00 396.90  37.97  50.00  "
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#descriptive statistics\n",
    "#statistical summary of the dataset using the describe() function. Using this function,\n",
    "#we can understand the count, min, max, mean and standard deviation for each attribute (column) in the dataset. \n",
    "df.describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cf2ba1bf",
   "metadata": {},
   "source": [
    "<b> correlation between attributes  \n",
    "Pandas offers three different ways to find correlation between attributes (columns).  \n",
    "The output of each of these correlation functions fall within the range [-1, 1].  \n",
    "\n",
    "1 - Positively correlated  \n",
    "-1 - Negatively correlated.  \n",
    "0 - Not correlated. </b>  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "c5b34874",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "PEARSON CORRELATION\n",
      "         CRIM    ZN  INDUS  CHAS   NOX    RM   AGE   DIS   RAD   TAX  PTRATIO  \\\n",
      "CRIM     1.00 -0.20   0.41 -0.06  0.42 -0.22  0.35 -0.38  0.63  0.58     0.29   \n",
      "ZN      -0.20  1.00  -0.53 -0.04 -0.52  0.31 -0.57  0.66 -0.31 -0.31    -0.39   \n",
      "INDUS    0.41 -0.53   1.00  0.06  0.76 -0.39  0.64 -0.71  0.60  0.72     0.38   \n",
      "CHAS    -0.06 -0.04   0.06  1.00  0.09  0.09  0.09 -0.10 -0.01 -0.04    -0.12   \n",
      "NOX      0.42 -0.52   0.76  0.09  1.00 -0.30  0.73 -0.77  0.61  0.67     0.19   \n",
      "RM      -0.22  0.31  -0.39  0.09 -0.30  1.00 -0.24  0.21 -0.21 -0.29    -0.36   \n",
      "AGE      0.35 -0.57   0.64  0.09  0.73 -0.24  1.00 -0.75  0.46  0.51     0.26   \n",
      "DIS     -0.38  0.66  -0.71 -0.10 -0.77  0.21 -0.75  1.00 -0.49 -0.53    -0.23   \n",
      "RAD      0.63 -0.31   0.60 -0.01  0.61 -0.21  0.46 -0.49  1.00  0.91     0.46   \n",
      "TAX      0.58 -0.31   0.72 -0.04  0.67 -0.29  0.51 -0.53  0.91  1.00     0.46   \n",
      "PTRATIO  0.29 -0.39   0.38 -0.12  0.19 -0.36  0.26 -0.23  0.46  0.46     1.00   \n",
      "B       -0.39  0.18  -0.36  0.05 -0.38  0.13 -0.27  0.29 -0.44 -0.44    -0.18   \n",
      "LSTAT    0.46 -0.41   0.60 -0.05  0.59 -0.61  0.60 -0.50  0.49  0.54     0.37   \n",
      "PRICE   -0.39  0.36  -0.48  0.18 -0.43  0.70 -0.38  0.25 -0.38 -0.47    -0.51   \n",
      "\n",
      "            B  LSTAT  PRICE  \n",
      "CRIM    -0.39   0.46  -0.39  \n",
      "ZN       0.18  -0.41   0.36  \n",
      "INDUS   -0.36   0.60  -0.48  \n",
      "CHAS     0.05  -0.05   0.18  \n",
      "NOX     -0.38   0.59  -0.43  \n",
      "RM       0.13  -0.61   0.70  \n",
      "AGE     -0.27   0.60  -0.38  \n",
      "DIS      0.29  -0.50   0.25  \n",
      "RAD     -0.44   0.49  -0.38  \n",
      "TAX     -0.44   0.54  -0.47  \n",
      "PTRATIO -0.18   0.37  -0.51  \n",
      "B        1.00  -0.37   0.33  \n",
      "LSTAT   -0.37   1.00  -0.74  \n",
      "PRICE    0.33  -0.74   1.00  \n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "SPEARMAN CORRELATION\n",
      "         CRIM    ZN  INDUS  CHAS   NOX    RM   AGE   DIS   RAD   TAX  PTRATIO  \\\n",
      "CRIM     1.00 -0.57   0.74  0.04  0.82 -0.31  0.70 -0.74  0.73  0.73     0.47   \n",
      "ZN      -0.57  1.00  -0.64 -0.04 -0.63  0.36 -0.54  0.61 -0.28 -0.37    -0.45   \n",
      "INDUS    0.74 -0.64   1.00  0.09  0.79 -0.42  0.68 -0.76  0.46  0.66     0.43   \n",
      "CHAS     0.04 -0.04   0.09  1.00  0.07  0.06  0.07 -0.08  0.02 -0.04    -0.14   \n",
      "NOX      0.82 -0.63   0.79  0.07  1.00 -0.31  0.80 -0.88  0.59  0.65     0.39   \n",
      "RM      -0.31  0.36  -0.42  0.06 -0.31  1.00 -0.28  0.26 -0.11 -0.27    -0.31   \n",
      "AGE      0.70 -0.54   0.68  0.07  0.80 -0.28  1.00 -0.80  0.42  0.53     0.36   \n",
      "DIS     -0.74  0.61  -0.76 -0.08 -0.88  0.26 -0.80  1.00 -0.50 -0.57    -0.32   \n",
      "RAD      0.73 -0.28   0.46  0.02  0.59 -0.11  0.42 -0.50  1.00  0.70     0.32   \n",
      "TAX      0.73 -0.37   0.66 -0.04  0.65 -0.27  0.53 -0.57  0.70  1.00     0.45   \n",
      "PTRATIO  0.47 -0.45   0.43 -0.14  0.39 -0.31  0.36 -0.32  0.32  0.45     1.00   \n",
      "B       -0.36  0.16  -0.29 -0.04 -0.30  0.05 -0.23  0.25 -0.28 -0.33    -0.07   \n",
      "LSTAT    0.63 -0.49   0.64 -0.05  0.64 -0.64  0.66 -0.56  0.39  0.53     0.47   \n",
      "PRICE   -0.56  0.44  -0.58  0.14 -0.56  0.63 -0.55  0.45 -0.35 -0.56    -0.56   \n",
      "\n",
      "            B  LSTAT  PRICE  \n",
      "CRIM    -0.36   0.63  -0.56  \n",
      "ZN       0.16  -0.49   0.44  \n",
      "INDUS   -0.29   0.64  -0.58  \n",
      "CHAS    -0.04  -0.05   0.14  \n",
      "NOX     -0.30   0.64  -0.56  \n",
      "RM       0.05  -0.64   0.63  \n",
      "AGE     -0.23   0.66  -0.55  \n",
      "DIS      0.25  -0.56   0.45  \n",
      "RAD     -0.28   0.39  -0.35  \n",
      "TAX     -0.33   0.53  -0.56  \n",
      "PTRATIO -0.07   0.47  -0.56  \n",
      "B        1.00  -0.21   0.19  \n",
      "LSTAT   -0.21   1.00  -0.85  \n",
      "PRICE    0.19  -0.85   1.00  \n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "KENDALL CORRELATION\n",
      "         CRIM    ZN  INDUS  CHAS   NOX    RM   AGE   DIS   RAD   TAX  PTRATIO  \\\n",
      "CRIM     1.00 -0.46   0.52  0.03  0.60 -0.21  0.50 -0.54  0.56  0.54     0.31   \n",
      "ZN      -0.46  1.00  -0.54 -0.04 -0.51  0.28 -0.43  0.48 -0.23 -0.29    -0.36   \n",
      "INDUS    0.52 -0.54   1.00  0.08  0.61 -0.29  0.49 -0.57  0.35  0.48     0.34   \n",
      "CHAS     0.03 -0.04   0.08  1.00  0.06  0.05  0.06 -0.07  0.02 -0.04    -0.12   \n",
      "NOX      0.60 -0.51   0.61  0.06  1.00 -0.22  0.59 -0.68  0.43  0.45     0.28   \n",
      "RM      -0.21  0.28  -0.29  0.05 -0.22  1.00 -0.19  0.18 -0.08 -0.19    -0.22   \n",
      "AGE      0.50 -0.43   0.49  0.06  0.59 -0.19  1.00 -0.61  0.31  0.36     0.25   \n",
      "DIS     -0.54  0.48  -0.57 -0.07 -0.68  0.18 -0.61  1.00 -0.36 -0.38    -0.22   \n",
      "RAD      0.56 -0.23   0.35  0.02  0.43 -0.08  0.31 -0.36  1.00  0.56     0.25   \n",
      "TAX      0.54 -0.29   0.48 -0.04  0.45 -0.19  0.36 -0.38  0.56  1.00     0.29   \n",
      "PTRATIO  0.31 -0.36   0.34 -0.12  0.28 -0.22  0.25 -0.22  0.25  0.29     1.00   \n",
      "B       -0.26  0.13  -0.19 -0.03 -0.20  0.03 -0.15  0.17 -0.21 -0.24    -0.04   \n",
      "LSTAT    0.45 -0.39   0.47 -0.04  0.45 -0.47  0.49 -0.41  0.29  0.38     0.33   \n",
      "PRICE   -0.40  0.34  -0.42  0.12 -0.39  0.48 -0.39  0.31 -0.25 -0.41    -0.40   \n",
      "\n",
      "            B  LSTAT  PRICE  \n",
      "CRIM    -0.26   0.45  -0.40  \n",
      "ZN       0.13  -0.39   0.34  \n",
      "INDUS   -0.19   0.47  -0.42  \n",
      "CHAS    -0.03  -0.04   0.12  \n",
      "NOX     -0.20   0.45  -0.39  \n",
      "RM       0.03  -0.47   0.48  \n",
      "AGE     -0.15   0.49  -0.39  \n",
      "DIS      0.17  -0.41   0.31  \n",
      "RAD     -0.21   0.29  -0.25  \n",
      "TAX     -0.24   0.38  -0.41  \n",
      "PTRATIO -0.04   0.33  -0.40  \n",
      "B        1.00  -0.15   0.13  \n",
      "LSTAT   -0.15   1.00  -0.67  \n",
      "PRICE    0.13  -0.67   1.00  \n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# correlation between attributes\n",
    "print(\"PEARSON CORRELATION\")\n",
    "print(df.corr(method=\"pearson\"))\n",
    "sns.heatmap(df.corr(method=\"pearson\"))\n",
    "plt.show()\n",
    "#plt.savefig(\"plots/heatmap_pearson.png\")\n",
    "#plt.clf()\n",
    "#plt.close()\n",
    "\n",
    "print(\"SPEARMAN CORRELATION\")\n",
    "print(df.corr(method=\"spearman\"))\n",
    "sns.heatmap(df.corr(method=\"spearman\"))\n",
    "#plt.savefig(\"plots/heatmap_spearman.png\")\n",
    "#plt.clf()\n",
    "#plt.close()\n",
    "plt.show()\n",
    "\n",
    "\n",
    "print(\"KENDALL CORRELATION\")\n",
    "print(df.corr(method=\"kendall\"))\n",
    "sns.heatmap(df.corr(method=\"kendall\"))\n",
    "#plt.savefig(\"plots/heatmap_kendall.png\")\n",
    "#plt.clf()\n",
    "#plt.close()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "81845d2a",
   "metadata": {},
   "source": [
    "<b> Missing Values"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a1294a15",
   "metadata": {},
   "source": [
    "Sometimes, in a dataset we will have missing values such as NaN or empty string in a cell. We need to take care of these missing values so that our machine learning model doesn‚Äôt break. To handle missing values, there are three approaches followed.\n",
    "\n",
    "Replace the missing value with a large negative number (e.g. -999).\n",
    "Replace the missing value with mean of the column.\n",
    "Replace the missing value with median of the column."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "6be2c6a3",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CRIM       False\n",
      "ZN         False\n",
      "INDUS      False\n",
      "CHAS       False\n",
      "NOX        False\n",
      "RM         False\n",
      "AGE        False\n",
      "DIS        False\n",
      "RAD        False\n",
      "TAX        False\n",
      "PTRATIO    False\n",
      "B          False\n",
      "LSTAT      False\n",
      "PRICE      False\n",
      "dtype: bool\n"
     ]
    }
   ],
   "source": [
    "#returns a boolean for each column in the dataset that tells if the column contains any missing value.\n",
    "print(pd.isnull(df).any())\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "f8dd86ed",
   "metadata": {},
   "outputs": [],
   "source": [
    "#the above processes can also be implemented as below:\n",
    "file_report = \"plots/boston_housing.txt\"\n",
    "with open(file_report, \"w\") as f:\n",
    "\tf.write(\"Features shape : {}\".format(df.drop(\"PRICE\", axis=1).shape))\n",
    "\tf.write(\"\\n\")\n",
    "\t\n",
    "\tf.write(\"Target shape   : {}\".format(df[\"PRICE\"].shape))\n",
    "\tf.write(\"\\n\")\n",
    "\t\n",
    "\tf.write(\"\\nColumn names\")\n",
    "\tf.write(\"\\n\")\n",
    "\tf.write(str(df.columns))\n",
    "\tf.write(\"\\n\")\n",
    "\t\n",
    "\tf.write(\"\\nStatistical summary\")\n",
    "\tf.write(\"\\n\")\n",
    "\tf.write(str(df.describe()))\n",
    "\tf.write(\"\\n\")\n",
    "\t\n",
    "\tf.write(\"\\nDatatypes\")\n",
    "\tf.write(\"\\n\")\n",
    "\tf.write(str(df.dtypes))\n",
    "\tf.write(\"\\n\")\n",
    "\t\n",
    "\tf.write(\"\\nPEARSON correlation\")\n",
    "\tf.write(\"\\n\")\n",
    "\tf.write(str(df.corr(method=\"pearson\")))\n",
    "\tf.write(\"\\n\")\n",
    "\n",
    "\tf.write(\"\\nSPEARMAN correlation\")\n",
    "\tf.write(\"\\n\")\n",
    "\tf.write(str(df.corr(method=\"spearman\")))\n",
    "\tf.write(\"\\n\")\n",
    "\t\n",
    "\tf.write(\"\\nKENDALL correlation\")\n",
    "\tf.write(\"\\n\")\n",
    "\tf.write(str(df.corr(method=\"kendall\")))\n",
    "\tf.write(\"\\nMissing Values\")\n",
    "\tf.write(\"\\n\")\n",
    "\tf.write(str(pd.isnull(df).any()))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b89428f9",
   "metadata": {},
   "source": [
    "# <b>Visualize the dataset"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6b864371",
   "metadata": {},
   "source": [
    "two types of visualization strategy namely univariate plots and bivariate plots.  \n",
    "As the name suggests, univariate plot is used to visualize a single column or an attribute whereas bivariate plot is used to visualize two columns or two attributes."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "2abed4c6",
   "metadata": {},
   "outputs": [],
   "source": [
    "#A box-whisker plot is a univariate plot used to visualize a data distribution.\n",
    "# visualize the dataset\n",
    "def warn(*args, **kwargs):\n",
    "    pass\n",
    "\n",
    "\n",
    "warnings.warn = warn\n",
    "warnings.filterwarnings(\"ignore\", category=FutureWarning)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "513fb427",
   "metadata": {},
   "outputs": [],
   "source": [
    "sns.set(color_codes=True)\n",
    "colors = [\"y\", \"b\", \"g\", \"r\"]\n",
    "\n",
    "cols = list(df.columns.values)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "f914d52f",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Density plot is another univariate plot that draws a histogram of the data distribution \n",
    "#and fits a Kernel Density Estimate (KDE).\n",
    "if not os.path.exists(\"plots/univariate/box\"):\n",
    "    os.makedirs(\"plots/univariate/box\")    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "0bf6c23b",
   "metadata": {},
   "outputs": [],
   "source": [
    "# draw a histogram and fit a kernel density estimate (KDE)\n",
    "for i, col in enumerate(cols):\n",
    "    sns.distplot(df[col], color=random.choice(colors))\n",
    "    plt.savefig(\"plots/univariate/density/density_\" + str(i) + \".png\")\n",
    "    plt.clf()\n",
    "    plt.close()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "38884094",
   "metadata": {},
   "outputs": [],
   "source": [
    "#multivariate plots\n",
    "if not os.path.exists(\"plots/multivariate\"):\n",
    "    os.makedirs(\"plots/multivariate\")\n",
    "\n",
    "# bivariate plot between target and reason of absence\n",
    "for i, col in enumerate(cols):\n",
    "    if (i == len(cols) - 1):\n",
    "        pass\n",
    "    else: \n",
    "        sns.jointplot(x=col, y=\"PRICE\", data=df);\n",
    "        plt.savefig(\"plots/multivariate/target_vs_\" + str(i) + \".png\")\n",
    "        plt.clf()\n",
    "        plt.close()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "a618c7fb",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Scatter plot is used to understand relationship between two different attributes in the dataset.\n",
    "#pairplot-For each pair of features (columns) in the dataset, we can visualize the scatter plot for each pair\n",
    "#long with the feature‚Äôs histogram along the diagonal in a single image using sns.pairplot() function.\n",
    "# pairplot\n",
    "sns.pairplot(df)\n",
    "plt.savefig(\"plots/pairplot.png\")\n",
    "plt.clf()\n",
    "plt.close()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e7e60ebf",
   "metadata": {},
   "source": [
    "We see a lot of structure in this dataset with outliers and different data distributions. Two key take aways from these visualizations are\n",
    "\n",
    "Data is not standardized (meaning there are different data distributions).\n",
    "Data is not normalized (meaning there are differing scales of data)."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bd1e1d55",
   "metadata": {},
   "source": [
    "## Training regression models"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f957807c",
   "metadata": {},
   "source": [
    "By looking at the dataset, we simply can‚Äôt suggest the best regression model for this problem. So, we will try out different regression models available in scikit-learn with a 10-fold cross validation method.\n",
    "\n",
    "It means we split the training data into train and test data using a test_size parameter for 10-folds. Each fold will have different samples that are not present in other folds. By this way, we can throughly train our model on different samples in the dataset.\n",
    "\n",
    "Before doing anything, we will split our boston housing prices dataframe df into features X and target Y."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "d8305646",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(506, 13)\n",
      "(506,)\n"
     ]
    }
   ],
   "source": [
    "X = df.drop(\"PRICE\", axis=1)\n",
    "Y = df[\"PRICE\"]\n",
    "print(X.shape)\n",
    "print(Y.shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "882d3943",
   "metadata": {},
   "source": [
    "As we see different data distributions, we will standardize the dataset using StandardScaler function in scikit-learn. This is a useful technique where the attributes are transformed to a standard gaussian distribution with a mean of 0 and a standard deviation of 1."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "b9eeaa88",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.preprocessing import StandardScaler, MinMaxScaler\n",
    "scaler = MinMaxScaler().fit(X)\n",
    "scaled_X = scaler.transform(X)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "687685d3",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(404, 13)\n",
      "(102, 13)\n",
      "(404,)\n",
      "(102,)\n"
     ]
    }
   ],
   "source": [
    "#Now, we will split the data into train and test set\n",
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "seed      = 9\n",
    "test_size = 0.20\n",
    "\n",
    "X_train, X_test, Y_train, Y_test = train_test_split(scaled_X, Y, test_size = test_size, random_state = seed)\n",
    "\n",
    "print(X_train.shape)\n",
    "print(X_test.shape)\n",
    "print(Y_train.shape)\n",
    "print(Y_test.shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a8c50dc3",
   "metadata": {},
   "source": [
    "<b> Let‚Äôs dive into regression. We will use different regression models offered by scikit-learn to produce a baseline accuracy for this problem. We will use the MSE (Mean Squared Error) as the performance metric for the regression models."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "5079d69c",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import KFold\n",
    "from sklearn.model_selection import cross_val_score\n",
    "from sklearn.linear_model import LinearRegression\n",
    "from sklearn.linear_model import Lasso\n",
    "from sklearn.linear_model import ElasticNet\n",
    "from sklearn.tree import DecisionTreeRegressor\n",
    "from sklearn.neighbors import KNeighborsRegressor\n",
    "from sklearn.svm import SVR\n",
    "from sklearn.ensemble import AdaBoostRegressor\n",
    "from sklearn.ensemble import GradientBoostingRegressor\n",
    "from sklearn.ensemble import RandomForestRegressor\n",
    "from sklearn.ensemble import ExtraTreesRegressor\n",
    "from sklearn.metrics import mean_squared_error\n",
    "from sklearn.utils import shuffle"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "0b7aea66",
   "metadata": {},
   "outputs": [],
   "source": [
    "# user variables to tune\n",
    "folds   = 10\n",
    "metric  = \"neg_mean_squared_error\"\n",
    "\n",
    "# hold different regression models in a single dictionary\n",
    "models = {}\n",
    "models[\"Linear\"]        = LinearRegression()\n",
    "models[\"Lasso\"]         = Lasso()\n",
    "models[\"ElasticNet\"]    = ElasticNet()\n",
    "models[\"KNN\"]           = KNeighborsRegressor()\n",
    "models[\"DecisionTree\"]  = DecisionTreeRegressor()\n",
    "models[\"SVR\"]           = SVR()\n",
    "models[\"AdaBoost\"]      = AdaBoostRegressor()\n",
    "models[\"GradientBoost\"] = GradientBoostingRegressor()\n",
    "models[\"RandomForest\"]  = RandomForestRegressor()\n",
    "models[\"ExtraTrees\"]    = ExtraTreesRegressor()\n",
    "# 10-fold cross validation for each model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "11865883",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Linear: -23.509, 10.778\n",
      "Lasso: -63.674, 18.484\n",
      "ElasticNet: -69.188, 19.888\n",
      "KNN: -26.868, 12.775\n",
      "DecisionTree: -21.518, 13.033\n",
      "SVR: -34.825, 16.588\n",
      "AdaBoost: -14.74, 4.804\n",
      "GradientBoost: -9.877, 3.221\n",
      "RandomForest: -12.402, 5.574\n",
      "ExtraTrees: -10.216, 3.093\n"
     ]
    }
   ],
   "source": [
    "# 10-fold cross validation for each model\n",
    "model_results = []\n",
    "model_names   = []\n",
    "for model_name in models:\n",
    "\tmodel   = models[model_name]\n",
    "\tk_fold  = KFold(n_splits=folds, random_state=True, shuffle=True)\n",
    "\tresults = cross_val_score(model, X_train, Y_train, cv=k_fold, scoring=metric)\n",
    "\t\n",
    "\tmodel_results.append(results)\n",
    "\tmodel_names.append(model_name)\n",
    "\tprint(\"{}: {}, {}\".format(model_name, round(results.mean(), 3), round(results.std(), 3)))\n",
    "# box-whisker plot to compare regression models\n",
    "figure = plt.figure()\n",
    "figure.suptitle('Regression models comparison')\n",
    "axis = figure.add_subplot(111)\n",
    "plt.boxplot(model_results)\n",
    "axis.set_xticklabels(model_names, rotation = 45, ha=\"right\")\n",
    "#mean squared deviation (MSD) of an estimator (of a procedure for estimating an unobserved quantity)\n",
    "#measures the average of the squares of the errors‚Äîthat is, \n",
    "#the average squared difference between the estimated values and the actual value.\n",
    "axis.set_ylabel(\"Mean Squared Error (MSE)\")\n",
    "plt.margins(0.05, 0.1)\n",
    "plt.savefig(\"plots/model_mse_scores.png\")\n",
    "plt.clf()\n",
    "plt.close()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bad09fc3",
   "metadata": {},
   "source": [
    "# Choosing the best model"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "870bb289",
   "metadata": {},
   "source": [
    "Based on the above comparison, we can see that Gradient Boosting Regression model outperforms all the other regression models. So, we will choose it as the best regression model for this problem"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "79631742",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[INFO] MSE : 10.292\n"
     ]
    }
   ],
   "source": [
    "# create and fit the best regression model\n",
    "best_model = GradientBoostingRegressor(random_state=seed)\n",
    "best_model.fit(X_train, Y_train)\n",
    "\n",
    "# make predictions using the model\n",
    "predictions = best_model.predict(X_test)\n",
    "print(\"[INFO] MSE : {}\".format(round(mean_squared_error(Y_test, predictions), 3)))\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cfdd3cf7",
   "metadata": {},
   "source": [
    "Finally, we can see that Gradient Boosting Regression model achieved a mean squared error of 9.961 which means our model is able to predict correct values on test data with MSE of 9.961. We can visualize the predictions made by our best model and the original targets Y_test using the below code."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "c498ec60",
   "metadata": {},
   "outputs": [],
   "source": [
    "# plot between predictions and Y_test\n",
    "x_axis = np.array(range(0, predictions.shape[0]))\n",
    "plt.plot(x_axis, predictions, linestyle=\"--\", marker=\"o\", alpha=0.7, color='r', label=\"predictions\")\n",
    "plt.plot(x_axis, Y_test, linestyle=\"--\", marker=\"o\", alpha=0.7, color='g', label=\"Y_test\")\n",
    "plt.xlabel('Row number')\n",
    "plt.ylabel('PRICE')\n",
    "plt.title('Predictions vs Y_test')\n",
    "plt.legend(loc='lower right')\n",
    "plt.savefig(\"plots/predictions_vs_ytest.png\")\n",
    "plt.clf()\n",
    "plt.close()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8a592214",
   "metadata": {},
   "source": [
    "Feature Importance\n",
    "Once we have a trained model, we can understand feature importance (or variable importance) of the dataset which tells us how important each feature is, to predict the target."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "de73d2dd",
   "metadata": {},
   "outputs": [],
   "source": [
    "# plot model's feature importance\n",
    "feature_importance = best_model.feature_importances_\n",
    "feature_importance = 100.0 * (feature_importance / feature_importance.max())\n",
    "\n",
    "sorted_idx = np.argsort(feature_importance)\n",
    "pos        = np.arange(sorted_idx.shape[0]) + .5\n",
    "\n",
    "plt.barh(pos, feature_importance[sorted_idx], align='center')\n",
    "plt.yticks(pos, dataset.feature_names[sorted_idx])\n",
    "plt.xlabel('Relative Importance')\n",
    "plt.title('Variable Importance')\n",
    "plt.savefig(\"plots/feature_importance.png\")\n",
    "plt.clf()\n",
    "plt.close()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "db30dd3c",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
